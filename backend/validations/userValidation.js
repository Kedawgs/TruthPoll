// backend/validations/userValidation.js
const Joi = require('joi');
const { ethers } = require('ethers');

// Custom validator for Ethereum addresses
const ethereumAddress = Joi.string()
  .custom((value, helpers) => {
    if (!ethers.utils.isAddress(value)) {
      return helpers.error('string.ethereumAddress');
    }
    return value.toLowerCase(); // Normalize to lowercase
  }, 'Ethereum address validation')
  .message('{{#label}} must be a valid Ethereum address');

// Username validation schema
const usernameSchema = Joi.object({
  username: Joi.string()
    .required()
    .trim()
    .min(3)
    .max(30)
    .pattern(/^[a-zA-Z0-9_-]+$/)
    .messages({
      'string.empty': 'Username is required',
      'string.min': 'Username must be at least 3 characters',
      'string.max': 'Username cannot be more than 30 characters',
      'string.pattern.base': 'Username can only contain letters, numbers, underscores and hyphens'
    }),
  address: ethereumAddress.required().messages({
    'any.required': 'Address is required'
  }),
  isAutoGenerated: Joi.boolean().default(false)
});

// User profile schema
const userProfileSchema = Joi.object({
  address: ethereumAddress.required().messages({
    'any.required': 'Address is required'
  })
});

module.exports = {
  usernameSchema,
  userProfileSchema
};