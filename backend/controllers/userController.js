// backend/controllers/userController.js
const User = require('../models/User');

/**
 * @desc    Update or set username
 * @route   POST /api/users/username
 * @access  Private
 */
exports.setUsername = async (req, res) => {
  try {
    const { username, address, isAutoGenerated } = req.body;
    
    if (!username || !address) {
      return res.status(400).json({
        success: false,
        error: 'Please provide username and address'
      });
    }
    
    // Check if username is already taken - only for manually set usernames
    if (!isAutoGenerated) {
      const existingUser = await User.findOne({ username });
      if (existingUser && existingUser.address.toLowerCase() !== address.toLowerCase()) {
        return res.status(400).json({
          success: false,
          error: 'Username is already taken'
        });
      }
    } else {
      // For auto-generated usernames, make sure it's unique by appending numbers if needed
      let baseUsername = username;
      let counter = 1;
      let uniqueUsername = baseUsername;
      
      while (true) {
        // Check if this username exists
        const existingUser = await User.findOne({ username: uniqueUsername });
        if (!existingUser || existingUser.address.toLowerCase() === address.toLowerCase()) {
          // Username is unique or belongs to this user
          break;
        }
        
        // Try next number
        uniqueUsername = `${baseUsername}_${counter}`;
        counter++;
      }
      
      // Use the unique username
      req.body.username = uniqueUsername;
    }
    
    // Check if the user already exists
    let user = await User.findOne({ address: address.toLowerCase() });
    
    if (user) {
      // Only update if not auto-generated or if user doesn't have a custom username
      if (!isAutoGenerated || user.isAutoGenerated) {
        // Update existing user
        user.username = req.body.username;
        user.isAutoGenerated = !!isAutoGenerated;
        await user.save();
      }
    } else {
      // Create new user
      user = await User.create({
        address: address.toLowerCase(),
        username: req.body.username,
        isAutoGenerated: !!isAutoGenerated
      });
    }
    
    res.status(200).json({
      success: true,
      data: {
        address: user.address,
        username: user.username,
        isAutoGenerated: user.isAutoGenerated
      }
    });
  } catch (error) {
    console.error('Error setting username:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Server Error'
    });
  }
};

/**
 * @desc    Get user profile
 * @route   GET /api/users/profile/:address
 * @access  Public
 */
exports.getUserProfile = async (req, res) => {
  try {
    const address = req.params.address.toLowerCase();
    
    const user = await User.findOne({ address });
    
    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      });
    }
    
    res.status(200).json({
      success: true,
      data: {
        address: user.address,
        username: user.username,
        isAutoGenerated: user.isAutoGenerated,
        createdAt: user.createdAt
      }
    });
  } catch (error) {
    console.error('Error getting user profile:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Server Error'
    });
  }
};