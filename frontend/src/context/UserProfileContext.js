// src/context/UserProfileContext.js - Enhanced with Avatar Support

import React, { createContext, useState, useEffect, useContext, useCallback } from 'react';
import { AuthContext } from './AuthContext';
import api from '../utils/api';
import logger from '../utils/logger';

// Create context
export const UserProfileContext = createContext();

export const UserProfileProvider = ({ children }) => {
  const { isConnected, account} = useContext(AuthContext);

  // User profile state
  const [userProfile, setUserProfile] = useState(null); // <--- State defined here
  const [needsUsername, setNeedsUsername] = useState(false);
  const [profileLoading, setProfileLoading] = useState(false);
  const [profileError, setProfileError] = useState(null);

  // ... (useEffect, fetchUserProfile, generateUsernameFromAddress, setUsername, skipUsernameSetup, resetUserProfile are all fine) ...
  // Load user profile when auth state changes
  useEffect(() => {
    if (isConnected && account) {
      fetchUserProfile(account);
    } else {
      // Reset state when disconnected
      setUserProfile(null);
      setNeedsUsername(false);
    }
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [isConnected, account]);

  // Fetch user profile from the backend
  const fetchUserProfile = async (userAddress) => {
    try {
      setProfileLoading(true);
      setProfileError(null);

      // Call the API to get user profile
      const response = await api.get(`/users/profile/${userAddress}`);

      if (response.data.success) {
        setUserProfile(response.data.data);
        setNeedsUsername(false);
      } else {
        setUserProfile(null);
        setNeedsUsername(true);
      }

      setProfileLoading(false);
    } catch (error) {
      // Handle 404 specially - user doesn't exist yet
      if (error.response && error.response.status === 404) {
        setUserProfile(null);
        setNeedsUsername(true);
      } else {
        logger.error("Error fetching user profile:", error);
        setProfileError("Failed to load user profile");
      }

      setProfileLoading(false);
    }
  };

  // Generate a readable username from wallet address
  const generateUsernameFromAddress = useCallback((address) => {
    if (!address) return null;

    // Format: user_1a2b3c where 1a2b3c are the first 6 characters after 0x
    const shortAddress = address.substring(2, 8).toLowerCase();
    return `user_${shortAddress}`;
  }, []);

  // Set or update username with avatar support
  const setUsername = async (username, isAutoGenerated = false, avatarFile = null) => {
    try {
      if (!isConnected || !account) {
        throw new Error('Not connected');
      }

      setProfileLoading(true);
      setProfileError(null);

      // Validate username
      if (!username || username.trim().length < 1) {
        setProfileError('Please enter a valid username');
        setProfileLoading(false);
        return false;
      }

      // Create form data to handle file upload
      const formData = new FormData();
      formData.append('username', username.trim());
      formData.append('address', account);
      formData.append('isAutoGenerated', isAutoGenerated);

      // Add avatar file if provided
      if (avatarFile) {
        formData.append('avatar', avatarFile);
      }

      // Call the API to set username with potential avatar
      const response = await api.post('/users/username', formData, {
        headers: {
          'Content-Type': 'multipart/form-data'
        }
      });

      if (response.data.success) {
        setUserProfile(response.data.data); // Update state internally
        setNeedsUsername(false);
        setProfileLoading(false);
        return true;
      } else {
        setProfileError(response.data.error || 'Failed to set username');
        setProfileLoading(false);
        return false;
      }
    } catch (error) {
      logger.error("Error setting username:", error);
      setProfileError(error.response?.data?.error || error.message || 'Failed to set username');
      setProfileLoading(false);
      return false;
    }
  };

  // Handle skipping username entry - sets an auto-generated username
  const skipUsernameSetup = async () => {
    try {
      if (!isConnected || !account) {
        return false;
      }

      // Generate a username based on wallet address
      const autoUsername = generateUsernameFromAddress(account);

      // Set the auto-generated username
      return await setUsername(autoUsername, true);
    } catch (error) {
      logger.error("Error setting auto username:", error);
      return false;
    }
  };

  // Reset user profile state (used during logout)
  const resetUserProfile = useCallback(() => {
    setUserProfile(null);
    setNeedsUsername(false);
    setProfileError(null);
  }, []);


  return (
    <UserProfileContext.Provider
      value={{
        userProfile,
        // *** ADD THE STATE SETTER TO THE VALUE OBJECT ***
        setUserProfile,
        // ***********************************************
        needsUsername,
        profileLoading,
        profileError,
        setUsername, // Keep the setUsername function too
        skipUsernameSetup,
        resetUserProfile,
        generateUsernameFromAddress
      }}
    >
      {children}
    </UserProfileContext.Provider>
  );
};