// src/pages/Profile.js
import React, { useState, useEffect } from 'react';
import { useAppContext } from '../hooks/useAppContext';
import api from '../utils/api';
import { formatAddress } from '../utils/web3Helper';
import './Profile.css';

const Profile = () => {
  const { 
    isConnected, 
    account, 
    authType, 
    userProfile, 
    usdtBalance,
    refreshUSDTBalance, 
    openAuthModal,
    getReceivedRewards
  } = useAppContext();

  // State for profile data
  const [rewards, setRewards] = useState([]);
  const [votes, setVotes] = useState(0);
  const [pollsCreated, setPollsCreated] = useState(0);
  const [rewardsPaid, setRewardsPaid] = useState(0);
  const [isEditingUsername, setIsEditingUsername] = useState(false);
  const [newUsername, setNewUsername] = useState('');
  const [loading, setLoading] = useState(true);
  const [statsLoading, setStatsLoading] = useState(true);
  const [error, setError] = useState(null);

  // Load user profile data when component mounts
  useEffect(() => {
    const loadProfileData = async () => {
      if (!isConnected || !account) {
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        setError(null);

        // Fetch user's rewards
        const rewardsData = await getReceivedRewards();
        setRewards(rewardsData?.data || []);

        // If user has a profile, set the username in the input field
        if (userProfile?.username) {
          setNewUsername(userProfile.username);
        }

        // Set initial stats (these would ideally come from API)
        setStatsLoading(true);
        
        // Get polls created by this user
        const pollsResponse = await api.get(`/polls?creator=${account}`);
        if (pollsResponse.data.success) {
          setPollsCreated(pollsResponse.data.total || 0);
        }

        // Fetch votes (this is a mock - you'd need to implement this endpoint)
        try {
          const votesResponse = await api.get(`/users/votes/${account}`);
          if (votesResponse.data.success) {
            setVotes(votesResponse.data.data.totalVotes || 0);
          }
        } catch (error) {
          // If endpoint doesn't exist yet, use the rewards length as a proxy for votes
          setVotes(rewardsData?.data?.length || 0);
        }

        // Calculate rewards paid
        const totalRewardsPaid = rewardsData?.data?.reduce((total, reward) => {
          return total + (parseFloat(reward.rewardAmount) || 0);
        }, 0) || 0;
        
        setRewardsPaid(totalRewardsPaid.toFixed(2));
        setStatsLoading(false);

        // Refresh balance
        await refreshUSDTBalance();

        setLoading(false);
      } catch (err) {
        console.error('Error loading profile data:', err);
        setError(err.message || 'Failed to load profile data');
        setLoading(false);
      }
    };

    loadProfileData();
  }, [isConnected, account, getReceivedRewards, userProfile, refreshUSDTBalance]);

  // Save username
  const handleSaveUsername = async () => {
    if (!newUsername.trim()) {
      setError('Username cannot be empty');
      return;
    }

    try {
      const response = await api.post('/users/username', {
        username: newUsername.trim(),
        address: account,
        isAutoGenerated: false
      });

      if (response.data.success) {
        setIsEditingUsername(false);
        // Refresh page or user data
        window.location.reload();
      } else {
        setError(response.data.error || 'Failed to update username');
      }
    } catch (err) {
      console.error('Error updating username:', err);
      setError(err.response?.data?.error || err.message || 'Failed to update username');
    }
  };

  // If not connected, show a prompt to connect
  if (!isConnected) {
    return (
      <div className="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
        <div className="bg-white shadow rounded-lg p-8 text-center">
          <h2 className="text-2xl font-bold mb-4">Profile</h2>
          <p className="mb-6 text-gray-600">Please connect your wallet or sign in to view your profile.</p>
          <button
            onClick={openAuthModal}
            className="inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-gradient-to-r from-cyan-500 to-blue-600 hover:from-cyan-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500"
          >
            Connect Wallet
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      {error && (
        <div className="mb-6 p-4 bg-red-50 border-l-4 border-red-400 text-red-700 rounded-md">
          <p className="text-sm">{error}</p>
        </div>
      )}

      <div className="bg-white shadow overflow-hidden rounded-lg">
        {/* Profile Header */}
        <div className="px-4 py-5 sm:px-6 profile-header">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between">
            <div className="flex items-center space-x-4">
              <div className="profile-avatar">
                {userProfile?.username ? userProfile.username.charAt(0).toUpperCase() : account.substring(2, 3).toUpperCase()}
              </div>
              <div>
                {isEditingUsername ? (
                  <div className="flex items-center space-x-2">
                    <input
                      type="text"
                      value={newUsername}
                      onChange={(e) => setNewUsername(e.target.value)}
                      className="rounded-md border-gray-300 shadow-sm focus:border-cyan-300 focus:ring focus:ring-cyan-200 focus:ring-opacity-50 text-gray-800"
                      placeholder="Enter username"
                    />
                    <button
                      onClick={handleSaveUsername}
                      className="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
                    >
                      Save
                    </button>
                    <button
                      onClick={() => {
                        setIsEditingUsername(false);
                        setNewUsername(userProfile?.username || '');
                      }}
                      className="inline-flex items-center px-3 py-1 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-gray-600 hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-500"
                    >
                      Cancel
                    </button>
                  </div>
                ) : (
                  <div className="flex items-center space-x-2">
                    <h3 className="text-xl font-bold">
                      {userProfile?.username || formatAddress(account)}
                    </h3>
                    <button
                      onClick={() => setIsEditingUsername(true)}
                      className="text-cyan-100 hover:text-white p-1 rounded-full hover:bg-blue-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-400"
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 20 20" fill="currentColor">
                        <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                      </svg>
                    </button>
                  </div>
                )}
                <p className="text-cyan-100 text-sm">
                  {formatAddress(account)}
                </p>
                <p className="text-cyan-100 text-sm">
                  Connected via {authType === 'magic' ? 'Email (Magic)' : 'Wallet'}
                </p>
              </div>
            </div>
            <div className="mt-4 md:mt-0 profile-balance-card">
              <span className="text-xs text-cyan-100 block">Balance</span>
              <span className="text-xl font-bold">{usdtBalance} USDT</span>
            </div>
          </div>
        </div>

        {/* Statistics Cards */}
        <div className="px-4 py-5 sm:p-6">
          <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">Statistics</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="profile-stats-card">
              <div className="profile-stat-label">Votes Cast</div>
              <div className="profile-stat-value">
                {statsLoading ? (
                  <div className="animate-pulse h-6 w-12 bg-gray-200 rounded"></div>
                ) : (
                  votes
                )}
              </div>
            </div>
            <div className="profile-stats-card">
              <div className="profile-stat-label">Polls Created</div>
              <div className="profile-stat-value">
                {statsLoading ? (
                  <div className="animate-pulse h-6 w-12 bg-gray-200 rounded"></div>
                ) : (
                  pollsCreated
                )}
              </div>
            </div>
            <div className="profile-stats-card">
              <div className="profile-stat-label">Rewards Received</div>
              <div className="profile-stat-value">
                {statsLoading ? (
                  <div className="animate-pulse h-6 w-12 bg-gray-200 rounded"></div>
                ) : (
                  rewards.length
                )}
              </div>
            </div>
            <div className="profile-stats-card">
              <div className="profile-stat-label">Rewards Paid (USDT)</div>
              <div className="profile-stat-value">
                {statsLoading ? (
                  <div className="animate-pulse h-6 w-12 bg-gray-200 rounded"></div>
                ) : (
                  rewardsPaid
                )}
              </div>
            </div>
          </div>
        </div>

        {/* Recent Activities */}
        <div className="px-4 py-5 sm:p-6 border-t border-gray-200">
          <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">Recent Rewards</h3>
          {loading ? (
            <div className="text-center py-12">
              <div className="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600"></div>
              <p className="mt-4">Loading rewards...</p>
            </div>
          ) : rewards.length > 0 ? (
            <div className="overflow-x-auto">
              <table className="profile-table">
                <thead>
                  <tr>
                    <th scope="col">Poll Title</th>
                    <th scope="col">Status</th>
                    <th scope="col">Reward</th>
                    <th scope="col">Received</th>
                  </tr>
                </thead>
                <tbody>
                  {rewards.map((reward, index) => (
                    <tr key={index}>
                      <td className="font-medium text-gray-900">
                        {reward.pollTitle || 'Unnamed Poll'}
                      </td>
                      <td>
                        <span className={`badge ${reward.hasReceivedReward ? 'badge-success' : 'badge-pending'}`}>
                          {reward.hasReceivedReward ? 'Claimed' : 'Pending'}
                        </span>
                      </td>
                      <td>
                        {reward.rewardAmount} USDT
                      </td>
                      <td>
                        {reward.timestamp ? new Date(reward.timestamp).toLocaleDateString() : 'N/A'}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          ) : (
            <div className="profile-empty-state">
              <svg xmlns="http://www.w3.org/2000/svg" className="profile-empty-icon h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <h3 className="profile-empty-title">No rewards yet</h3>
              <p className="profile-empty-text">
                Vote on polls with rewards to earn USDT.
              </p>
            </div>
          )}
        </div>

        {/* Smart Wallet Section (For non-Magic users) */}
        {authType !== 'magic' && (
          <div className="px-4 py-5 sm:p-6 border-t border-gray-200">
            <h3 className="text-lg leading-6 font-medium text-gray-900 mb-4">Smart Wallet</h3>
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4 rounded-md">
              <div className="flex">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-blue-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                    <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                  </svg>
                </div>
                <div className="ml-3">
                  <p className="text-sm text-blue-700">
                    You're using a smart wallet for gasless voting. This wallet relays your transactions through our platform.
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Profile;